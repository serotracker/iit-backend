"""First Migration

Revision ID: eec4e83beadf
Revises: 
Create Date: 2020-09-24 18:14:36.964573

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'eec4e83beadf'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('age',
    sa.Column('age_id', postgresql.UUID(), nullable=False),
    sa.Column('age_name', sa.String(length=64), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('age_id')
    )
    op.create_table('age_bridge',
    sa.Column('id', postgresql.UUID(), nullable=False),
    sa.Column('source_id', postgresql.UUID(), nullable=True),
    sa.Column('age_id', postgresql.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('airtable_source',
    sa.Column('source_id', postgresql.UUID(), nullable=False),
    sa.Column('source_name', sa.String(), nullable=True),
    sa.Column('publication_date', sa.DateTime(), nullable=True),
    sa.Column('first_author', sa.String(length=128), nullable=True),
    sa.Column('url', sa.String(), nullable=True),
    sa.Column('source_type', sa.String(length=64), nullable=True),
    sa.Column('source_publisher', sa.String(length=256), nullable=True),
    sa.Column('summary', sa.String(), nullable=True),
    sa.Column('study_type', sa.String(length=128), nullable=True),
    sa.Column('study_status', sa.String(length=32), nullable=True),
    sa.Column('country', sa.String(length=64), nullable=True),
    sa.Column('lead_organization', sa.String(length=128), nullable=True),
    sa.Column('sampling_start_date', sa.DateTime(), nullable=True),
    sa.Column('sampling_end_date', sa.DateTime(), nullable=True),
    sa.Column('sex', sa.String(length=16), nullable=True),
    sa.Column('sampling_method', sa.String(length=128), nullable=True),
    sa.Column('sensitivity', sa.Float(), nullable=True),
    sa.Column('specificity', sa.Float(), nullable=True),
    sa.Column('include_in_n', sa.Boolean(), nullable=True),
    sa.Column('denominator_value', sa.Integer(), nullable=True),
    sa.Column('numerator_definition', sa.String(), nullable=True),
    sa.Column('serum_pos_prevalence', sa.Float(), nullable=True),
    sa.Column('overall_risk_of_bias', sa.String(length=16), nullable=True),
    sa.Column('isotype_igg', sa.Boolean(), nullable=True),
    sa.Column('isotype_igm', sa.Boolean(), nullable=True),
    sa.Column('isotype_iga', sa.Boolean(), nullable=True),
    sa.Column('estimate_grade', sa.String(length=32), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('source_id')
    )
    op.create_table('approving_regulator',
    sa.Column('approving_regulator_id', postgresql.UUID(), nullable=False),
    sa.Column('approving_regulator_name', sa.String(length=256), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('approving_regulator_id')
    )
    op.create_table('approving_regulator_bridge',
    sa.Column('id', postgresql.UUID(), nullable=False),
    sa.Column('source_id', postgresql.UUID(), nullable=True),
    sa.Column('approving_regulator_id', postgresql.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('city',
    sa.Column('city_id', postgresql.UUID(), nullable=False),
    sa.Column('city_name', sa.String(length=128), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('city_id')
    )
    op.create_table('city_bridge',
    sa.Column('id', postgresql.UUID(), nullable=False),
    sa.Column('source_id', postgresql.UUID(), nullable=True),
    sa.Column('city_id', postgresql.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('population_group',
    sa.Column('population_group_id', postgresql.UUID(), nullable=False),
    sa.Column('population_group_name', sa.String(length=128), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('population_group_id')
    )
    op.create_table('population_group_bridge',
    sa.Column('id', postgresql.UUID(), nullable=False),
    sa.Column('source_id', postgresql.UUID(), nullable=True),
    sa.Column('population_group_id', postgresql.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('specimen_type',
    sa.Column('specimen_type_id', postgresql.UUID(), nullable=False),
    sa.Column('specimen_type_name', sa.String(length=64), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('specimen_type_id')
    )
    op.create_table('specimen_type_bridge',
    sa.Column('id', postgresql.UUID(), nullable=False),
    sa.Column('source_id', postgresql.UUID(), nullable=True),
    sa.Column('specimen_type_id', postgresql.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('state',
    sa.Column('state_id', postgresql.UUID(), nullable=False),
    sa.Column('state_name', sa.String(length=128), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('state_id')
    )
    op.create_table('state_bridge',
    sa.Column('id', postgresql.UUID(), nullable=False),
    sa.Column('source_id', postgresql.UUID(), nullable=True),
    sa.Column('state_id', postgresql.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('test_manufacturer',
    sa.Column('test_manufacturer_id', postgresql.UUID(), nullable=False),
    sa.Column('test_manufacturer_name', sa.String(length=128), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('test_manufacturer_id')
    )
    op.create_table('test_manufacturer_bridge',
    sa.Column('id', postgresql.UUID(), nullable=False),
    sa.Column('source_id', postgresql.UUID(), nullable=True),
    sa.Column('test_manufacturer_id', postgresql.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('test_type',
    sa.Column('test_type_id', postgresql.UUID(), nullable=False),
    sa.Column('test_type_name', sa.String(length=256), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('test_type_id')
    )
    op.create_table('test_type_bridge',
    sa.Column('id', postgresql.UUID(), nullable=False),
    sa.Column('source_id', postgresql.UUID(), nullable=True),
    sa.Column('test_type_id', postgresql.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('test_type_bridge')
    op.drop_table('test_type')
    op.drop_table('test_manufacturer_bridge')
    op.drop_table('test_manufacturer')
    op.drop_table('state_bridge')
    op.drop_table('state')
    op.drop_table('specimen_type_bridge')
    op.drop_table('specimen_type')
    op.drop_table('population_group_bridge')
    op.drop_table('population_group')
    op.drop_table('city_bridge')
    op.drop_table('city')
    op.drop_table('approving_regulator_bridge')
    op.drop_table('approving_regulator')
    op.drop_table('airtable_source')
    op.drop_table('age_bridge')
    op.drop_table('age')
    # ### end Alembic commands ###
