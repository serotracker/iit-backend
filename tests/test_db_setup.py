import test_utils.factories as factories

from test_utils import delete_records, delete_all_records, insert_full_recordset
from app.serotracker_sqlalchemy.models import DashboardSource


def test_db_table_names(db):
    # check that table metadata (generated through sqlalchemy)
    # matches with db engine (which reflects an actual connection to our test db)
    metadata_tables = set([tbl.name for tbl in db.metadata.sorted_tables])
    engine_tables = set(db.engine.table_names())
    # Note: alembic version tbl is autogenerated and not defined in our models
    engine_tables.discard('alembic_version')
    assert metadata_tables == engine_tables


def test_empty_db(db):
    for tbl in db.metadata.sorted_tables:
        assert db.session.query(tbl).count() == 0


# Tests inserting and deleting a single dashboard source record
# using our test helper functions
def test_one_dashboard_source_record(db):
    new_dashboard_source_record = factories.DashboardSourceFactory()
    all_dashboard_source_records = db.session.query(DashboardSource).all()
    assert [new_dashboard_source_record] == all_dashboard_source_records
    assert len(all_dashboard_source_records) == 1
    delete_records(db.session, all_dashboard_source_records)
    assert db.session.query(DashboardSource).count() == 0


# Tests inserting a complete record set
# using our test helper functions
def test_insert_recordset(db):
    insert_full_recordset(num_records=4)
    for tbl in db.metadata.sorted_tables:
        # Note: bridge tables and our main record tables should have 4 entries
        # Other tables should only have a single entry
        if tbl.name in ['dashboard_source', 'research_source'] or 'bridge' in tbl.name:
            assert db.session.query(tbl).count() == 4
        else:
            db.session.query(tbl).count() == 1

    delete_all_records(db.session)
    for tbl in db.metadata.sorted_tables:
        assert db.session.query(tbl).count() == 0
