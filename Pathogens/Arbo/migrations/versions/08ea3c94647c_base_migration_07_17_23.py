"""base_migration_07_17_23

Revision ID: 08ea3c94647c
Revises: 
Create Date: 2023-07-17 22:52:55.986682

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '08ea3c94647c'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('antibody',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('antibody', sa.VARCHAR(length=255), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id'),
    schema='arbo'
    )
    op.create_table('antigen',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('antigen', sa.VARCHAR(length=255), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id'),
    schema='arbo'
    )
    op.create_table('source_sheet',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('source_title', sa.Text(), nullable=True),
    sa.Column('extractor', sa.VARCHAR(length=255), nullable=True),
    sa.Column('first_author', sa.VARCHAR(length=255), nullable=True),
    sa.Column('publication_date', sa.Date(), nullable=True),
    sa.Column('url', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id'),
    schema='arbo'
    )
    op.create_table('estimate',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('sex', sa.VARCHAR(length=255), nullable=True),
    sa.Column('age_minimum', sa.Integer(), nullable=True),
    sa.Column('age_maximum', sa.Integer(), nullable=True),
    sa.Column('age_group', sa.VARCHAR(length=255), nullable=True),
    sa.Column('assay_other', sa.VARCHAR(length=255), nullable=True),
    sa.Column('producer', sa.VARCHAR(length=255), nullable=True),
    sa.Column('producer_other', sa.VARCHAR(length=255), nullable=True),
    sa.Column('sample_frame', sa.VARCHAR(length=255), nullable=True),
    sa.Column('same_frame_target_group', sa.VARCHAR(length=255), nullable=True),
    sa.Column('sample_size', sa.Integer(), nullable=True),
    sa.Column('sample_numerator', sa.Integer(), nullable=True),
    sa.Column('inclusion_criteria', sa.Text(), nullable=True),
    sa.Column('pathogen', sa.VARCHAR(length=255), nullable=True),
    sa.Column('seroprevalence', sa.VARCHAR(length=255), nullable=True),
    sa.Column('country', sa.VARCHAR(length=255), nullable=True),
    sa.Column('state', sa.VARCHAR(length=255), nullable=True),
    sa.Column('city', sa.VARCHAR(length=255), nullable=True),
    sa.Column('longitude', sa.Float(), nullable=True),
    sa.Column('latitude', sa.Float(), nullable=True),
    sa.Column('sample_start_date', sa.Date(), nullable=True),
    sa.Column('sample_end_date', sa.Date(), nullable=True),
    sa.Column('assay', sa.VARCHAR(length=255), nullable=True),
    sa.Column('url', sa.Text(), nullable=True),
    sa.Column('source_sheet_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['source_sheet_id'], ['arbo.source_sheet.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id'),
    schema='arbo'
    )
    op.create_table('antibody_to_estimate',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('antibody_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('estimate_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['antibody_id'], ['arbo.antibody.id'], ),
    sa.ForeignKeyConstraint(['estimate_id'], ['arbo.estimate.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id'),
    schema='arbo'
    )
    op.create_index(op.f('ix_arbo_antibody_to_estimate_antibody_id'), 'antibody_to_estimate', ['antibody_id'], unique=False, schema='arbo')
    op.create_index(op.f('ix_arbo_antibody_to_estimate_estimate_id'), 'antibody_to_estimate', ['estimate_id'], unique=False, schema='arbo')
    op.create_table('antigen_to_estimate',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('antigen_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('estimate_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['antigen_id'], ['arbo.antigen.id'], ),
    sa.ForeignKeyConstraint(['estimate_id'], ['arbo.estimate.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id'),
    schema='arbo'
    )
    op.create_index(op.f('ix_arbo_antigen_to_estimate_antigen_id'), 'antigen_to_estimate', ['antigen_id'], unique=False, schema='arbo')
    op.create_index(op.f('ix_arbo_antigen_to_estimate_estimate_id'), 'antigen_to_estimate', ['estimate_id'], unique=False, schema='arbo')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_arbo_antigen_to_estimate_estimate_id'), table_name='antigen_to_estimate', schema='arbo')
    op.drop_index(op.f('ix_arbo_antigen_to_estimate_antigen_id'), table_name='antigen_to_estimate', schema='arbo')
    op.drop_table('antigen_to_estimate', schema='arbo')
    op.drop_index(op.f('ix_arbo_antibody_to_estimate_estimate_id'), table_name='antibody_to_estimate', schema='arbo')
    op.drop_index(op.f('ix_arbo_antibody_to_estimate_antibody_id'), table_name='antibody_to_estimate', schema='arbo')
    op.drop_table('antibody_to_estimate', schema='arbo')
    op.drop_table('estimate', schema='arbo')
    op.drop_table('source_sheet', schema='arbo')
    op.drop_table('antigen', schema='arbo')
    op.drop_table('antibody', schema='arbo')
    # ### end Alembic commands ###
